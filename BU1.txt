package com.example.al_ghifar.efalcongcs;

import android.Manifest;
import android.annotation.TargetApi;
import android.graphics.Color;
import android.content.pm.PackageManager;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import java.util.ArrayList;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.Menu;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;
import android.widget.ArrayAdapter;
import com.felhr.usbserial.UsbSerialDevice;
import com.felhr.usbserial.UsbSerialInterface;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;


import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.GoogleMap.OnMapLongClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;

public class Efalcongcs extends FragmentActivity implements OnMapReadyCallback {
    private static final String TAG = "Efalcongcs";
    public final String ACTION_USB_PERMISSION = "package com.example.al_ghifar.efalcon.USB_PERMISSION";
    Button startButton, monitorButton, stopButton;
    RelativeLayout LayoutMonitor, LayoutWaypoint;
    TextView textView, Troll, Tpitch, Tyaw, Tlat, Tlong, Talt, tvWPLat, tvWPLng;
    VideoView VideoFrame;
    ListView lvLat, lvLng;
    private ImageView HeadingRoll, HeadingPitch, HeadingYaw, HeadingAttitude;
    //EditText editText;
    UsbManager usbManager;
    UsbDevice device;
    UsbSerialDevice serialPort;
    UsbDeviceConnection connection;
    private float DegreeStart = 0f;
    private GoogleMap mMap;
    private final static int MY_PERMISSION_FINE_LOCATION = 101;
    ArrayList<LatLng> points;
    ArrayList<LatLng> tracking;
    ArrayList<String> listLat = new ArrayList<>();
    ArrayList<String> listLng = new ArrayList<>();
    ArrayAdapter<String> adapterLat, adapterLng;

    UsbSerialInterface.UsbReadCallback mCallback = new UsbSerialInterface.UsbReadCallback() { //Defining a Callback which triggers whenever data is read.
        @Override
        public void onReceivedData(byte[] arg0) {
            //String data;

            try {
                String data = new String(arg0, "UTF-8");
                String[] parsing = data.split(",");
                int count = parsing.length;
                if (count == 6) {

                    final String roll = new String(parsing[0]);
                    final String pitch = new String(parsing[1]);
                    final String yaw = new String(parsing[2]);
                    final String lat = new String(parsing[3]);
                    final String lng = new String(parsing[4]);
                    final String alt = new String(parsing[5]);

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Troll.setText(roll);
                            Tpitch.setText(pitch);
                            Tyaw.setText(yaw);
                            Tlat.setText(lat);
                            Tlong.setText(lng);
                            Talt.setText(alt);
                            TrackingDrone(lat,lng);
                            DataRoll(roll);
                            DataPitch(pitch);
                            DataYaw(yaw);

                        }
                    });
                    //Double tLat = new Double(lat);
                    //Double tLng = new Double(lng);
                    //LatLng track = new LatLng(tLat,tLng);
                    //mMap.addMarker(new MarkerOptions().position(track).icon(BitmapDescriptorFactory.fromResource(R.drawable.efalcon)));
                    ///*
//*/
                } else {
                    tvAppend(textView, data);
                }

            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }

        }
    };
    private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() { //Broadcast Receiver to automatically start and stop the Serial connection.
        @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals(ACTION_USB_PERMISSION)) {
                boolean granted = intent.getExtras().getBoolean(UsbManager.EXTRA_PERMISSION_GRANTED);
                if (granted) {
                    connection = usbManager.openDevice(device);
                    serialPort = UsbSerialDevice.createUsbSerialDevice(device, connection);
                    if (serialPort != null) {
                        if (serialPort.open()) { //Set Serial Connection Parameters.
                            setUiEnabled(true);
                            serialPort.setBaudRate(57600);
                            serialPort.setDataBits(UsbSerialInterface.DATA_BITS_8);
                            serialPort.setStopBits(UsbSerialInterface.STOP_BITS_1);
                            serialPort.setParity(UsbSerialInterface.PARITY_NONE);
                            serialPort.setFlowControl(UsbSerialInterface.FLOW_CONTROL_OFF);
                            serialPort.read(mCallback);
                            //tvAppend(textView,"Serial Connection Opened!\n");

                        } else {
                            Log.d("SERIAL", "PORT NOT OPEN");
                        }
                    } else {
                        Log.d("SERIAL", "PORT IS NULL");
                    }
                } else {
                    Log.d("SERIAL", "PERM NOT GRANTED");
                }
            } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
                onClickStart(startButton);
            } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
                onClickStop(stopButton);

            }//*/
        }

        ;
    };
    private LatLng koordinat;

    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
    @Override
    //protected
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_efalcongcs);
        Log.d(TAG, "onCreate: Started");
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        usbManager = (UsbManager) getSystemService(this.USB_SERVICE);
        startButton = (Button) findViewById(R.id.BtConnect);
        stopButton = (Button) findViewById(R.id.BtDisconnect);
        monitorButton = (Button) findViewById(R.id.BtMonitor);
        textView = (TextView) findViewById(R.id.tvSerial);
        tvWPLat = (TextView) findViewById(R.id.tvWPlat);
        tvWPLng = (TextView) findViewById(R.id.tvWPlng);
        lvLat = (ListView) findViewById(R.id.lvlat);
        lvLng = (ListView) findViewById(R.id.lvlng);
        Troll = (TextView) findViewById(R.id.tvRoll);
        Tpitch = (TextView) findViewById(R.id.tvPitch);
        Tyaw = (TextView) findViewById(R.id.tvYaw);
        Tlat = (TextView) findViewById(R.id.tvLat);
        Tlong = (TextView) findViewById(R.id.tvLong);
        Talt = (TextView) findViewById(R.id.tvAlt);
        HeadingPitch = (ImageView) findViewById(R.id.roll_image);
        HeadingRoll = (ImageView) findViewById(R.id.pitch_image);
        HeadingYaw = (ImageView) findViewById(R.id.yaw_image);
        HeadingAttitude = (ImageView) findViewById(R.id.attitude_image);
        VideoFrame = (VideoView) findViewById(R.id.Stream);
        LayoutMonitor = (RelativeLayout) findViewById(R.id.monitorLayout);
        LayoutWaypoint = (RelativeLayout) findViewById(R.id.waypointLayout);
        //VideoFrame.setVisibility(VideoFrame.VISIBLE);
        LayoutWaypoint.setVisibility(LayoutWaypoint.INVISIBLE);
        setUiEnabled(false);
        IntentFilter filter = new IntentFilter();
        filter.addAction(ACTION_USB_PERMISSION);
        filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
        points = new ArrayList<LatLng>();
        tracking = new ArrayList<LatLng>();
        adapterLat = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listLat);
        adapterLng = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listLng);
        registerReceiver(broadcastReceiver, filter);
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
        final String derajat = "-90";
        //String lt = "-5.382387";
        //String lg = "105.257955";
        //DataYaw(derajat);
        //TrackingDrone(lt,lg);

    }

    public void onClickMonitor(View view) {
        LayoutMonitor.setVisibility(LayoutMonitor.VISIBLE);
        VideoFrame.setVisibility(VideoFrame.VISIBLE);
        LayoutWaypoint.setVisibility(LayoutWaypoint.INVISIBLE);
    }

    public void onClickWP(View view) {
        LayoutMonitor.setVisibility(LayoutMonitor.INVISIBLE);
        VideoFrame.setVisibility(VideoFrame.INVISIBLE);
        LayoutWaypoint.setVisibility(LayoutWaypoint.VISIBLE);
        mMap.setOnMapClickListener(new OnMapClickListener() {

            @Override
            public void onMapClick(LatLng point) {

                // Instantiating the class MarkerOptions to plot marker on the map
                MarkerOptions markerOptions = new MarkerOptions();

                // Setting latitude and longitude of the marker position
                markerOptions.position(point);

                // Setting titile of the infowindow of the marker
                markerOptions.title("Position");

                // Setting the content of the infowindow of the marker
                markerOptions.snippet("Latitude:"+point.latitude+","+"Longitude:"+point.longitude);
                Double dtLat = new Double(point.latitude);
                Double dtLng = new Double(point.longitude);
                String dataLat = dtLat.toString();
                String dataLng = dtLng.toString();
                listLat.add(dataLat);
                //tvWPLat.setText(dataLat);
                adapterLat.notifyDataSetChanged();
                listLng.add(dataLng);
                //tvWPLng.setText(dataLng);
                adapterLng.notifyDataSetChanged();

                // Instantiating the class PolylineOptions to plot polyline in the map
                PolylineOptions polylineOptions = new PolylineOptions();

                // Setting the color of the polyline
                polylineOptions.color(Color.RED);

                // Setting the width of the polyline
                polylineOptions.width(3);

                // Adding the taped point to the ArrayList
                points.add(point);

                // Setting points of polyline
                polylineOptions.addAll(points);

                // Adding the polyline to the map
                mMap.addPolyline(polylineOptions);

                // Adding the marker to the map
                mMap.addMarker(markerOptions);

            }
        });

        lvLat.setAdapter(adapterLat);
        lvLng.setAdapter(adapterLng);

        mMap.setOnMapLongClickListener(new OnMapLongClickListener() {

            @Override
            public void onMapLongClick(LatLng point) {
                // Clearing the markers and polylines in the google map
                mMap.clear();
                adapterLat.clear();
                adapterLng.clear();
                // Empty the array list
                points.clear();
            }
        });

    }


    public void setUiEnabled(boolean bool) {
        startButton.setEnabled(!bool);
        stopButton.setEnabled(bool);
        textView.setEnabled(bool);

    }

    public void onClickStart(View view) {

        HashMap<String, UsbDevice> usbDevices = usbManager.getDeviceList();
        if (!usbDevices.isEmpty()) {
            boolean keep = true;
            for (Map.Entry<String, UsbDevice> entry : usbDevices.entrySet()) {
                device = entry.getValue();
                int deviceVID = device.getVendorId();
                if (deviceVID == 0x10C4)//3DR 433 Telemetry Vendor ID
                {
                    PendingIntent pi = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);
                    usbManager.requestPermission(device, pi);
                    keep = false;
                } else {
                    connection = null;
                    device = null;
                }

                if (!keep)
                    break;
            }
        }


    }

    public void onClickStop(View view) {
        setUiEnabled(false);
        serialPort.close();
    }

    private void tvAppend(TextView tv, CharSequence text) {
        final TextView ftv = tv;
        final CharSequence ftext = text;

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                ftv.append(ftext);
            }
        });
    }

    private void DataRoll(String dataRoll) {
        Float heading = new Float(dataRoll);
        //float newHeading = Math.round(heading);
        //if (heading > 360) heading = heading - 360;
        // rotation animation - reverse turn degree degrees
        RotateAnimation ra = new RotateAnimation(
                DegreeStart,
                -heading,
                Animation.RELATIVE_TO_SELF, 0.5f,
                Animation.RELATIVE_TO_SELF, 0.5f);
        // set the compass animation after the end of the reservation status
        ra.setFillAfter(true);
        // set how long the animation for the compass image will take place
        ra.setDuration(210);
        // Start animation of compass image
        HeadingRoll.startAnimation(ra);
        DegreeStart = -heading;
    }

    private void DataPitch(String dataPitch) {
        Float heading = new Float(dataPitch);
        //float newHeading = Math.round(heading);
        //if (heading > 360) heading = heading - 360;
        // rotation animation - reverse turn degree degrees
        RotateAnimation ra = new RotateAnimation(
                DegreeStart,
                -heading,
                Animation.RELATIVE_TO_SELF, 0.5f,
                Animation.RELATIVE_TO_SELF, 0.5f);
        // set the compass animation after the end of the reservation status
        ra.setFillAfter(true);
        // set how long the animation for the compass image will take place
        ra.setDuration(210);
        // Start animation of compass image
        HeadingPitch.startAnimation(ra);
        DegreeStart = -heading;
    }

    ///*
    private void DataYaw(String dataYaw) {
        Float heading = new Float(dataYaw);
       // float newHeading = Math.round(heading);
        //if (heading > 360) heading = heading - 360;
        // rotation animation - reverse turn degree degrees
        RotateAnimation ra = new RotateAnimation(
                DegreeStart,
                -heading,
                Animation.RELATIVE_TO_SELF, 0.5f,
                Animation.RELATIVE_TO_SELF, 0.5f);
        // set the compass animation after the end of the reservation status
        ra.setFillAfter(true);
        // set how long the animation for the compass image will take place
        ra.setDuration(210);
        // Start animation of compass image
        HeadingYaw.startAnimation(ra);
        DegreeStart = -heading;
    }//*/

    public void TrackingDrone(String dataLat, String dataLng) {
        Double locLat = new Double(dataLat);
        Double locLng = new Double(dataLng);
        koordinat = new LatLng(locLat, locLng);

        //mMap.addMarker(new MarkerOptions().position(koordinat).icon(BitmapDescriptorFactory.fromResource(R.drawable.efalcon)));
        CameraPosition cameraPosition = new CameraPosition.Builder()
                .target(koordinat)
                .zoom(18)
                //.bearing(90)
                //.tilt(30)
                .build();//*/
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
        //mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(koordinat, 20));
        PolylineOptions polylineOptions = new PolylineOptions();
        // Setting the color of the polyline
        polylineOptions.color(Color.BLUE);
        // Setting the width of the polyline
        polylineOptions.width(3);
        // Adding the taped point to the ArrayList
        tracking.add(koordinat);
        // Setting points of polyline
        polylineOptions.addAll(tracking);
        mMap.addPolyline(polylineOptions);

    }


    @Override
    public void onMapReady(GoogleMap googleMap) {
        //Efalcongcs my = new Efalcongcs();
        mMap = googleMap;
       // mMap.addMarker(new MarkerOptions().position(my.koordinat).icon(BitmapDescriptorFactory.fromResource(R.drawable.efalcon)));

        //String lt = "-5.382387";
        //String lg = "105.257955";
        //DataYaw(derajat);
        //TrackingDrone(lt,lg);
        // Add a marker in Sydney and move the camera
        //LatLng surabaya = new LatLng(-7.2778145, 112.7941234);
        //mMap.addMarker(new MarkerOptions().position(koordinat).title("Surabaya"));
        //mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(surabaya, 20));

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            mMap.setMyLocationEnabled(true);
            mMap.setPadding(0,575,0,0);

        } else {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, MY_PERMISSION_FINE_LOCATION);
            }
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case MY_PERMISSION_FINE_LOCATION:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                        // TODO: Consider calling
                        mMap.setMyLocationEnabled(true);
                    }
                }else {
                    Toast.makeText(getApplicationContext(), "This app requires location permissions to be granted", Toast.LENGTH_LONG).show();
                    finish();
                }
            break;
        }
    }
}
